{
  "Obiekty JS": [
    {
      "title": "Czym jest obiekt?",
      "description": "Obiekt grupuje nam zmienne i funkcje w jedną całość. To znaczy, że zamiast tworzyć zmienne np. imiePsa, rasaPsa, możemy stworzyć obiekt pies z właściwościami \"imie\" i \"rasa\"",
      "code": "",
      "table": []
    },
    {
      "title": "Jak stworzyć obiekt",
      "description": "Obiekt tworzymy używając tzw. klamerek \"{}\". W środku wpisujemy właściwości obiektu",
      "code": "const Dom = {\n\ttyp: \"jednorodzinny\",\n\tgaraz: false,\n\tiloscMieszkancow: 5\n};",
      "table": []
    },
    {
      "title": "Jak dostać się do właściwości obiektu",
      "description": "Możemy to zrobić na dwa sposoby: po kropce (najczęściej spotykany) lub w nawiasach kwadratowych [] (znany z tablic)",
      "code": "console.log(Dom.typ); // w konsoli wypisze \"jednorodzinny\"\nconsole.log(Dom[\"typ\"]); // też zadziała\nDom.typ = \"Dwurodzinny\"; // zmiana wartości",
      "table": []
    },
    {
      "title": "Dodanie nieistniejącej właściwości",
      "description": "Aby dodać nową właściwość do obiektu, wystarczy po prostu ustawić jej jakąś wartość",
      "code": "const osoba = {\n\timie: \"Jan\",\n\tnazwisko: \"Kowalski\",\n};\nosoba.wiek = 12;",
      "table": []
    },
    {
      "title": "Właściwości obiektu",
      "description": "Właściwości możemy oznaczać liczbami, pojedynczymi słowami, zdaniami, a nawet emotkami. WAŻNE: sposób po kropce działa tylko z jednym słowem",
      "code": "const jakisObiekt = {\n  1234: null,\n  \"ala ma kota\": true,\n  subway: \"surfers\",\n  \"👌\": \"emotka\",\n};",
      "table": []
    },
    {
      "title": "Funkcje tworzące obiekt",
      "description": "Obiekty mozemy tworzyć dynamicznie za pomocą m.in funkcji.",
      "code": "function stworzSamochod(marka, model) {\n  return {\n    marka: marka,\n    model: model,\n    czyNowy: true,\n  };\n}\n\nconst mercedes = stworzSamochod(\"Opel\", \"Astra\");\n// {marka: \"Opel\", model: \"Astra\", czyNowy: true}",
      "table": []
    },
    {
      "title": "Skrócony zapis",
      "description": "Jeśli wstawiamy do obiektu jakąś zmienną lub argument funkcji, to zamiast dwa razy pisać tą samą nazwę, możemy to skrócić.",
      "code": "function stworzSamochod(marka, model) {\n  return {\n    marka,\n    model,\n    czyNowy: true,\n  };\n}\n\nconst mercedes = stworzSamochod(\"Opel\", \"Astra\");\n// {marka: \"Opel\", model: \"Astra\", czyNowy: true}",
      "table": []
    },
    {
      "title": "Usuwanie obiektów",
      "description": "Do usuwania obiektów służy nam słówko delete (z ang. usuń)",
      "code": "delete Dom;",
      "table": []
    }
  ],
  "Zadania Obiekty JS": [
    {
      "title": "Zadanie 1",
      "description": "Stwórz obiekt o nazwie mojZwierzak, który będzie miał trzy właściwości:\n\n- imie (np. „Burek”),\n\n- gatunek (np. „pies”),\n\n- wiek (np. 3).\n\nNa koniec, wyświetl ten obiekt w konsoli",
      "code": "// wynik w konsoli:\n{imie: 'Burek', gatunek: 'pies', wiek: 3}",
      "table": []
    },
    {
      "title": "Zadanie 2",
      "description": "Stwórz obiekt zwierzakKolegi, który będzie miał taki sam gatunek, jak twój zwierzak. Na koniec wypisz imie i gatunek tego zwierzaka w konsoli PODPOWIEDŹ: odwołaj się do obiektu mojZwierzak.",
      "code": "",
      "table": []
    },
    {
      "title": "Zadanie 3",
      "description": "Stwórz funkcję nowyTelefon(), która będzie przyjmować trzy argumenty: marka, model, pamiec, i zwracać nowo utworzony obiekt z tymi właściwościami.",
      "code": "",
      "table": []
    },
    {
      "title": "Zadanie 4",
      "description": "Utwórz trzy różne telefony i przypisz je do stałych (const). Usuń jeden z nich.",
      "code": "",
      "table": []
    },
    {
      "title": "Zadanie 5",
      "description": "Masz poniższy obiekt. Dodaj do niego właściwość \"cena ogółem\" (PODPOWIEDŹ: użyj nawiasów kwadratowych), która będzie przyjmować wartość ilości pomnożonej przez cenę za sztukę. Na koniec wypisz ten obiekt w konsoli",
      "code": "const towar = {\n  nazwa: \"Pomidory\",\n  ilosc: 20,\n  \"cena za sztukę\": 140,\n};",
      "table": []
    },
    {
      "title": "Zadanie 6",
      "description": "Stwórz obiekt sygnalizacja z właściwością kolor ustawioną na wartość \"czerwony\". Następnie zrób funkcję zmienKolor(), która będzie zmieniać kolor na następny w kolejności: czerwony na żółty, żółty na zielony, zielony na żółty, żółty na czerwony.",
      "code": "",
      "table": []
    },
    {
      "title": "Zadanie 7 (trudniejsze)",
      "description": "Stwórz tablicę o nazwie gracze, która będzie przechowywać obiekty z właściwościami nick, level i online. Właściwość online będzie przyjmować true lub false. Następnie wypisz w konsoli wszystkich graczy, którzy są online. PODPOWIEDŹ: użyj forEach",
      "code": "",
      "table": []
    }
  ],
  "Obiekty JS cd": [
    {
      "title": "Zagnieżdżanie obiektów (obiekt w obiekcie)",
      "description": "Właściwością obiektu może być każdy typ danych, łącznie z tablicą, a także innym obiektem",
      "code": "const osoba = {\n  imie: \"Jan\",\n  nazwisko: \"Kowalski\",\n  adres: {\n    miasto: \"Rzeszów\",\n    ulica: \"Krakowska\",\n    \"numer budynku\": 18,\n  },\n  oceny: [5, 2, 3, 5, 5, 5, 4],\n};\nconsole.log(osoba.adres.miasto); // Rzeszów\nconsole.log(osoba.oceny[0]); // 5\n",
      "table": []
    },
    {
      "title": "Metody obiektów (funkcje w obiekcie)",
      "description": "Właściwością obiektu może także być funkcja",
      "code": "const osoba = {\n  imie: \"Jan\",\n  nazwisko: \"Kowalski\",\n  witaj() {\n    console.log(\"Dzień dobry\");\n  },\n};\n\nosoba.witaj(); // Dzień dobry\n",
      "table": []
    },
    {
      "title": "Słówko this",
      "description": "\"this\" w metodzie wskazuje na obiekt, w którym znajduje się ta metoda. Można zapamiętać, że \"this\" wskazuje na obiekt \"przed kropką\"",
      "code": "const osoba = {\n  imie: \"Jan\",\n  nazwisko: \"Kowalski\",\n  witaj() {\n    console.log(\"Dzień dobry, jestem \" + this.imie);\n  },\n};\n\nosoba.witaj(); // Dzień dobry, jestem Jan\n",
      "table": []
    }
  ],
  "Zadania Obiekty JS cd": [
    {
      "title": "Zadanie 1",
      "description": "Stwórz obiekt auto, który ma właściwości:\n\nmarka,\n\nmodel,\n\nwłaściciel (obiekt z właściwościami imie i nazwisko),\n\nrokProdukcji.\n\nPo stworzeniu, wypisz imię właściciela oraz model samochodu.",
      "code": "",
      "table": []
    },
    {
      "title": "Zadanie 2",
      "description": "Stwórz obiekt gracz z właściwościami:\n\nnick,\n\npoziom,\n\nmetodą poziomUp(), która zwiększa poziom o 1 i wypisuje komunikat, np. \"Gratulacje, awansowałeś na poziom 2!\".\n\nZastosuj słowo kluczowe this w metodzie, aby uzyskać dostęp do właściwości obiektu",
      "code": "",
      "table": []
    },
    {
      "title": "Zadanie 3",
      "description": "",
      "code": "Stwórz obiekt użytkownik z właściwościami:\n\nimie,\n\nnazwisko,\n\nwiek,\n\nadres – obiekt z właściwościami ulica, miasto, kodPocztowy,\n\nmetodą powitanie(), która wyświetla komunikat powitalny, np. \"Witaj, Jan Kowalski!\".\n\nZastosuj this w metodzie, aby wypisać powitanie i dane użytkownika.",
      "table": []
    },
    {
      "title": "Zadanie 4",
      "description": "",
      "code": "Stwórz obiekt biblioteka z właściwościami:\n\nnazwa,\n\nadres,\n\nksiazki – tablica obiektów, w której każdy obiekt to książka\nz właściwościami: tytuł, autor.\n\ndodajKsiazke(tytul, autor) – metoda, która dodaje książkę do tablicy ksiazki.\n\nPo dodaniu książki, wypisz tytuły wszystkich książek w bibliotece.",
      "table": []
    }
  ],
  "Tablice Python": [
    {
      "title": "Kod lekcja 04/06/2025",
      "description": "",
      "code": "zakupy = [\"jablko\", \"marchewka\", \"banan\"]\n# Dodawanie elementu na koniec tablicy\nzakupy.append(\"gruszka\")\n\n# Usuwanie ostatniego elementu z tablicy\nzakupy.pop()\n\n# Usuwanie jakiegoś elementu\nzakupy.remove(\"jablko\")\n\n# Wyswietlanie tej tablicy\nfor produkt in zakupy:\n    print(produkt)",
      "table": []
    }
  ],
  "Tablice JS": [
    {
      "title": "Co to jest tablica",
      "description": "Tablica to jest zbiór elementów. Do każdego z nich jest przypisany indeks liczony od zera (dla pierwszego elementu indeks wynosi 0, dla drugiego 1 itd)",
      "code": "",
      "table": []
    },
    {
      "title": "Jak tworzymy tablice",
      "description": "Tablicę tworzymy za pomocą nawiasów kwadratowych []. W środku nich wpisujemy elementy, które chcemy w niej zamieścić",
      "code": "const przykladowaTablica = [1, 2, 523, 23, 41];",
      "table": []
    },
    {
      "title": "Elementy o różnym typie danych",
      "description": "Tablica może mieć elementy o dowolnym typie danych, jednak zalecałbym trzymać się jednego typu w jednej tablicy",
      "code": "const przykladowaTablica = [1, {nazwa: \"obiekt\"}, \"tekst\", null, true];",
      "table": []
    },
    {
      "title": "Jak dostać się do jednego elementu",
      "description": "Najczęściej dostajemy się do niego za pomocą jego indeksu. Podajemy go w nawiasach kwadratowych zaraz po nazwie tablicy",
      "code": "const liczby = [1,2,3,4,5,6,7,8];\nconsole.log(liczby[0]);\n// wynik w konsoli: 1",
      "table": []
    },
    {
      "title": "Jak dodać element na koniec tablicy",
      "description": "Służy do tego metoda push(). Jako argument podajemy element, który chcemy do niej dodać",
      "code": "const imiona = [\"jan\", \"konrad\", \"ala\"];\nimiona.push(\"maciek\");\n\nconsole.log(imiona);\n// wynik w konsoli:\n// [\"jan\", \"konrad\", \"ala\", \"maciek\"]",
      "table": []
    },
    {
      "title": "Jak usunąć element z końca tablicy",
      "description": "Służy do tego metoda pop(). Nie przyjmuje ona argumentów",
      "code": "const imiona = [\"jan\", \"konrad\", \"ala\"];\nimiona.pop();\n\nconsole.log(imiona);\n// wynik w konsoli:\n// [\"jan\", \"konrad\"]",
      "table": []
    },
    {
      "title": "Jak sprawdzić długość tablicy",
      "description": "Służy do tego właściwość length. UWAGA: TO NIE JEST FUNKCJA I NIE POTRZEBA NAWIASÓW",
      "code": "const tablica = [1, 2, 3, 4, 5];\nconsole.log(tablica.length);\n//Wynik w konsoli: 5",
      "table": []
    },
    {
      "title": "Jak przejść przez każdy element tablicy",
      "description": "Możemy użyć do tego zwykłej pętli for, która idzie od 0 do długości tablicy - 1 (indeksy liczymy od zera). Naszym elementem będzie zatem element tablicy o indeksie i",
      "code": "const tablica = [1,2,3,4,5,6,7,8];\n\nfor(let i = 0; i < tablica.length - 1; i++){\n\tconsole.log(tablica[i]);\n\t// tablica[i] to nasz element\n}\n",
      "table": []
    }
  ],
  "pliki python": [
    {
      "title": "Odczytywanie pliku w pythonie",
      "description": "Plik odczytujemy za pomocą metody read(). Jako pierwszy argument podajemy ścieżke do pliku. Drugim argumentem będzie tryb otwarcia (np. \"r\" - odczyt, \"w\" - zapis). Wynik funkcji przypisujemy do zmiennej",
      "code": "file = open(\"./dane.txt\", \"r\")",
      "table": []
    },
    {
      "title": "Podstawowe tryby otwarcia pliku (drugi argument metody open())",
      "description": "Do każdego z tych trybów możemy dodać atrybut \"b\" (np. \"rb\", \"wb\", \"ab\"). Wtedy plik otworzy się w trybie do danych binarnych (np. obrazy, dźwięk, wideo itd)",
      "code": "",
      "table": [
        ["Tryb otwarcia", "Co robi?"],
        ["\"r\"", "otwiera w trybie odczytu danych z pliku"],
        ["\"w\"", "czyści plik i zapisuje w nim podane przez nas dane"],
        ["\"a\"", "dopisuje do pliku podane przez nas dane"]
      ]
    },
    {
      "title": "Odczyt całego pliku na raz",
      "description": "Możemy odczytać cały plik na raz za pomocą metody read() na wcześniej otwartym przez nas pliku",
      "code": "file = open(\"./dane.txt\", \"r\") # otworzy się w trybie odczytu\n\nprint(file.read())\n\n# W konsoli pokażą nam się dane z pliku dane.txt",
      "table": []
    },
    {
      "title": "Zamykanie pliku",
      "description": "Jeśli otworzymy jakiś plik, musimy go zamknąć, kiedy skończymy z nim pracę. Do tego posłuży nam metoda close()",
      "code": "file = open(\"./dane.txt\", \"r\") # otworzy się w trybie odczytu\n\nprint(file.read())\n\nfile.close()",
      "table": []
    },
    {
      "title": "Zapisywanie danych do pliku",
      "description": "Aby zapisać dane w pliku, używamy metody write(). W argumencie podajemy dane, które chcemy w nim zapisać",
      "code": "file = open(\"./dane.txt\", \"w\") # otworzy się w trybie zapisu\n\nfile.write(\"przykladowy tekst\")\n\n# dotychczasowa zawartość pliku się usunie (tryb \"w\")\n# treść pliku to będzie \"przykładowy tekst\"\n\nfile.close()",
      "table": []
    }
  ],
  "DOM JS": [
    {
      "title": "Czym jest DOM?",
      "description": "DOM to skrót od ang. Document Object Model (Obiektowy Model Dokumentu). W praktyce oznacza to, że JS każdy element HTML traktuje jako osobny obiekt, czyli taki zbiór właściwości. Każdy z tych elementów jest ułożony w konkretnej hierarchii (drzewie dokumentu).",
      "code": "",
      "table": []
    },
    {
      "title": "Jak dostać się do elementu HTML w JS?",
      "description": "Do tego możemy użyć kilku metod. Najprostszą z nich jest document.getElementById(). W argumencie podajemy wartość atrybutu id elementu, do którego chcemy się odwołać",
      "code": "const btn = document.getElementById(\"btn\");\n// odwołamy się do elementu o id \"btn\"",
      "table": []
    },
    {
      "title": "Alternatywa dla getElementById",
      "description": "Alternatywą, i znacznie częściej używaną, metodą jest document.querySelector(). W argumencie podajemy selektor css. Nasza zmienna przyjmnie pierwszy element wybrany, przez ten selektor",
      "code": "const btn = document.querySelector(\"#btn\");\n// odwołamy się do elementu o id \"btn\"\n\nconst ul = document.querySelector(\"ul\");\n// odwołamy się do pierwszej listy nieuporządkowanej\n\nconst tekst = document.querySelector(\"div p\");\n// odwołamy się do pierwszego paragrafu znajdującego się w div",
      "table": []
    },
    {
      "title": "Jak zmienić atrybuty html w js",
      "description": "Wartość atrybutów takich jak \"src\", \"href\", i wielu innych zmieniamy po kropce. W podobny sposób jak wartości zmiennych",
      "code": "const obrazek = document.querySelector(\"img\");\n\nobrazek.src = \"./obraz.jpg\"; // zmieniamy źródło obrazka",
      "table": []
    },
    {
      "title": "Jak zmienić style CSS w JS",
      "description": "Style danego elementu zmieniamy podobnie jak wartości atrybutów. Z tym, że nazwy styli piszemy bez pauz i każdy wyraz, oprócz pierwszego, z dużej litery (tzw. camelCase).\nPrzykładowo: \"background-color\" (CSS) - \"backgroundColor\" (JS)",
      "code": "const paragraf = document.querySelector(\"p\");\n\nparagraf.style.backgroundColor = \"red\";\n\nparagraf.style.color = \"yellow\";\n\nparagraf.style.fontSize = \"24px\";",
      "table": []
    },
    {
      "title": "Jak zmienić tekst elementu HTML",
      "description": "Możemy go zmienić za pomocą właściwości textContent",
      "code": "const paragraf = document.getElementById(\"tekst\");\n\nparagraf.textContent = \"Przykładowy tekst\";",
      "table": []
    },
    {
      "title": "Jak usunąć element HTML",
      "description": "Używamy do tego metody remove()",
      "code": "const paragraf = document.getElementById(\"tekst\");\n\nparagraf.remove();\n\n// paragraf zniknie z naszej strony internetowej",
      "table": []
    }
  ]
}
